type Query {
    allUsers: [User!]!
    allProducts: [Product!]!
    allReviews: [Review!]!
    products(query: String): [Product!]!
    allCategories: [Categories!]!
    allSubCategories: [SubCategories!]!
    allSubSubCategories: [SubSubCategories!]!
}

type Mutation {
    createUser(data: AddUserInput) : User!
    createProduct(data: AddProductInput) : Product!
    createReview(data: AddReviewInput) : Review!

    # deleteUser(id: ID!) : User!
    # deleteProduct(id: ID!) : Product!
    # deleteReview(id: ID!) : Comment!

    # updateUser(id: ID!, data: UpdateUserInput) : User!
    # updateProduct(id: ID!, data: updateProductInput) : Product!
    # updateReview(id: ID!, data: updateReviewInput) : Comment!
}


# type Subscription {
#     review(productId: ID!): Comment!
#     product: ProductSubscriptionPayload!
# }

# type ProductSubscriptionPayload {
#     mutation: String!
#     data: Product!
# }

input AddUserInput {
    name: String!,
    email: String!,
    password: String!,
    role: String!
}

input AddProductInput {
    name: String!, 
    description: String!,
}

input AddReviewInput {
    text: String!
    author: String!
    product: String!
}

# input UpdateUserInput {
#     name: String, 
#     email: String, 
#     age: Int
# }

# input updateProductInput {
#     title: String, 
#     body: String, 
#     published: Boolean,
#     author: ID
# }

# input updateReviewInput {
#     text: String, 
#     author: ID, 
#     product: ID
# }

type Product {
    id: ID!,
    name: String!,
    description: String!,
    reviews: [Review!]!
}

type UserRole {
    id: ID!,
    name: String!,
}

type User {
    id: ID!,
    name: String!,
    email: String!,
    password: String!,
    reviews: [Review!]!,
    role: UserRole!,
}

type Review {
    id: ID!,
    text: String!,
    author: User!,
    product: Product!
}

type Categories {
    id: ID!,
    name: String!
}

type SubCategories {
    id: ID!,
    name: String!,
    image: String!,
}

type SubSubCategories {
    id: ID!,
    name: String!,
}